;;;; -*-  Mode: LISP; Syntax: Common-Lisp; Base: 10                          -*-
;;;; ---------------------------------------------------------------------------
;;;; File name: hangout-rules.meld
;;;;    System: FIRE
;;;;    Author: Ken Forbus
;;;;   Created: January 20, 2011 16:16:29
;;;;   Purpose: 371 Assignment three
;;;; ---------------------------------------------------------------------------
;;;;  modified: Thursday, January 23, 2014
;;;; ---------------------------------------------------------------------------

(in-microtheory 371TestRulesMt)

(isa 371TestRulesMt Microtheory)
;(comment 371TestRulesMt
;  "The 371TestRulesMt microtheory is for testing Horn-clause rules,
;   as used via FIRE's query procedure.")

(genlMt 371TestMt 371TestRulesMt)

(<== (isa ?idea Bill-ProposedLaw)
	(and (isa ?idea Bill-Idea)
	     (writtenSponsored ?idea)
	       (not (or (presidentSigned ?idea)
		   	(and (presidentVeto ?idea)
			     (vetoOverTurn ?idea True))))))
;
(<== (isa ?idea KilledBill-ProposedLaw)
	(and (isa ?idea Bill-ProposedLaw)
	     (or (houseVoteResult ?idea False)
		 (senateVoteResult ?idea False)
		 (and (presidentVeto ?idea)
		       (vetoOverTurn ?idea False)))))	

(<== (isa ?idea Law)
	  (and (isa ?idea Bill-Idea)
	       (writtenSponsored ?idea)
	       (houseVoteResult ?idea True)
	       (senateVoteResult ?idea True)
	       (or (presidentSigned ?idea)
		   (and (presidentVeto ?idea)
			(vetoOverTurn ?idea True)))))
;(in-microtheory PrologMt)

;; For illustration: How to implement Prolog's negation by failure.
;; By controlling whether or not this microtheory is in the logical
;; environment of a computation, negation by failure can be turned 
;; off or on easily.  More specialied rules can be developed to
;; only use it for specific predicates, or for specific circumstances
;; involving particular types of predicates.

;(<== (not ?fact)
 ;    (uninferredSentence ?fact))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; End of Code
