;;;; -*-  Mode: LISP; Syntax: Common-Lisp; Base: 10                          -*-
;;;; ---------------------------------------------------------------------------
;;;; File name: hangout-rules.meld
;;;;    System: FIRE
;;;;    Author: Ken Forbus
;;;;   Created: January 20, 2011 16:16:29
;;;;   Purpose: 371 Assignment three
;;;; ---------------------------------------------------------------------------
;;;;  modified: Thursday, January 23, 2014
;;;; ---------------------------------------------------------------------------

(in-microtheory 371TestRulesMt)

(isa 371TestRulesMt Microtheory)
(comment 371TestRulesMt
  "The 371TestRulesMt microtheory is for testing Horn-clause rules,
   as used via FIRE's query procedure.")

(genlMt 371TestMt 371TestRulesMt)

;;; Define your Horn clause rules here, for recognizing that something is
;;; a CS hangout.  


(<== (isa ?store CS-Hangout)
	(hasWiFiConnection ?store)
	(canServeJustCaffeine ?store)
	(allowsLingering ?store))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(in-microtheory PrologMt)

;; For illustration: How to implement Prolog's negation by failure.
;; By controlling whether or not this microtheory is in the logical
;; environment of a computation, negation by failure can be turned 
;; off or on easily.  More specialied rules can be developed to
;; only use it for specific predicates, or for specific circumstances
;; involving particular types of predicates.

(<== (not ?fact)
     (uninferredSentence ?fact))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; End of Code
